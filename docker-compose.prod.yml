# Docker Compose para producci贸n
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vincula}
      POSTGRES_USER: ${POSTGRES_USER:-vincula_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vincula_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped

  livekit:
    image: livekit/livekit-server:v1.7.2
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    environment:
      - "LIVEKIT_KEYS=devkey: ${LIVEKIT_SECRET_KEY:-vincula_livekit_secret_key_2024_production_secure}"
      - LIVEKIT_REDIS=redis://redis:6379
      # Usar la IP externa del VPS para producci贸n
      - LIVEKIT_RTC_NODE_IP=72.60.48.118
      - LIVEKIT_RTC_USE_EXTERNAL_IP=true
      - LIVEKIT_RTC_UDP_PORT=7882
      - LIVEKIT_RTC_PORT_RANGE_START=7882
      - LIVEKIT_RTC_PORT_RANGE_END=7882
      - LIVEKIT_RTC_TCP_PORT=7881
      # STUN servers para WebRTC en producci贸n
      - LIVEKIT_RTC_STUN_SERVERS=stun:stun.l.google.com:19302,stun:stun1.l.google.com:19302
      - LIVEKIT_LOG_LEVEL=warn
    restart: unless-stopped

  api-gateway:
    build: ./backend/api-gateway
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-vincula_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vincula}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-devkey}
      - LIVEKIT_SECRET_KEY=${LIVEKIT_SECRET_KEY:-vincula_livekit_secret_key_2024_production_secure}
      - LIVEKIT_SERVER_URL=ws://livekit:7880
      - USER_SERVICE_URL=http://user-service:8080
    restart: unless-stopped

  user-service:
    build: ./backend/user-service
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-vincula_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vincula}
      - JWT_SECRET=${JWT_SECRET}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-devkey}
      - LIVEKIT_API_SECRET=${LIVEKIT_SECRET_KEY:-vincula_livekit_secret_key_2024_production_secure}
      # URLs de LiveKit para producci贸n
      - LIVEKIT_URL=ws://72.60.48.118:7880
      - LIVEKIT_INTERNAL_URL=ws://livekit:7880
    restart: unless-stopped

  call-service:
    build: ./backend/call-service
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      livekit:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-vincula_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vincula}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY:-devkey}
      - LIVEKIT_SECRET_KEY=${LIVEKIT_SECRET_KEY:-vincula_livekit_secret_key_2024_production_secure}
      - LIVEKIT_SERVER_URL=ws://livekit:7880
    restart: unless-stopped

  queue-service:
    build: ./backend/queue-service
    ports:
      - "8083:8080"
    depends_on:
      redis:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
