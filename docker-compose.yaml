services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vincula}
      POSTGRES_USER: ${POSTGRES_USER:-vincula_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vincula_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  livekit:
    image: livekit/livekit-server:latest
    ports:
      - "7880:7880"
      - "7881:7881"
      - "7882:7882/udp"
    environment:
      - "LIVEKIT_KEYS=devkey: secret"
      - LIVEKIT_REDIS=redis://redis:6379
      # Advertise localhost to avoid NAT 1:1 mapping issues in Docker Desktop
      - LIVEKIT_RTC_NODE_IP=192.168.1.15
      # Explicitly disable external IP discovery/NAT mapping for local dev
      - LIVEKIT_RTC_USE_EXTERNAL_IP=false
      # Use single-port UDP mux for media
      - LIVEKIT_RTC_UDP_PORT=7882
      # Constrain ICE port range to the UDP mux port
      - LIVEKIT_RTC_PORT_RANGE_START=7882
      - LIVEKIT_RTC_PORT_RANGE_END=7882
      # Enable ICE/TCP fallback on 7881
      - LIVEKIT_RTC_TCP_PORT=7881
      # Optional: add a public STUN server and increase logging for debugging
      - LIVEKIT_RTC_STUN_SERVERS=stun:stun.l.google.com:19302
      - LIVEKIT_LOG_LEVEL=info

  api-gateway:
    build: ./backend/api-gateway
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-vincula_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vincula}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_SECRET_KEY=${LIVEKIT_SECRET_KEY}
      - LIVEKIT_SERVER_URL=ws://livekit:7880

  user-service:
    build: ./backend/user-service
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-vincula_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vincula}
      - JWT_SECRET=${JWT_SECRET}
      - LIVEKIT_API_KEY=devkey
      - LIVEKIT_API_SECRET=secret
      - LIVEKIT_URL=ws://192.168.1.15:7880

  call-service:
    build: ./backend/call-service
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      livekit:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-vincula_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-vincula}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_SECRET_KEY=${LIVEKIT_SECRET_KEY}
      - LIVEKIT_SERVER_URL=ws://livekit:7880

  queue-service:
    build: ./backend/queue-service
    ports:
      - "8083:8080"
    depends_on:
      redis:
        condition: service_started
    environment:
      - REDIS_URL=redis://redis:6379

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    environment:
      # Use relative API path; other PCs will access via http://192.168.1.15:3000
      - REACT_APP_API_URL=
      - REACT_APP_WS_URL=
      - REACT_APP_LIVEKIT_URL=ws://192.168.1.15:7880

volumes:
  postgres_data:
  redis_data: